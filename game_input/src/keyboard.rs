use std::str::FromStr;

use game_common::collections::string::SmallStr;

use crate::ButtonState;

#[derive(Clone, Debug, PartialEq, Eq, Hash)]
pub struct KeyboardInput {
    pub scan_code: ScanCode,
    pub key_code: Option<KeyCode>,
    // TODO: Maybe add a dedicated "NamedKey" type instead of
    // raw text.
    pub text: Option<SmallStr>,
    pub state: ButtonState,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub struct ScanCode(pub u32);

#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum KeyCode {
    Key1,
    Key2,
    Key3,
    Key4,
    Key5,
    Key6,
    Key7,
    Key8,
    Key9,
    Key0,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Escape,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    Snapshot,
    Scroll,
    Pause,
    Insert,
    Home,
    Delete,
    End,
    PageDown,
    PageUp,
    Left,
    Up,
    Right,
    Down,
    Back,
    Return,
    Space,
    Compose,
    Caret,
    Numlock,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadAdd,
    NumpadDivide,
    NumpadDecimal,
    NumpadComma,
    NumpadEnter,
    NumpadEquals,
    NumpadMultiply,
    NumpadSubtract,
    AbntC1,
    AbntC2,
    Apostrophe,
    Apps,
    Asterisk,
    At,
    Ax,
    Backslash,
    Calculator,
    Capital,
    Colon,
    Comma,
    Convert,
    Equals,
    Grave,
    Kana,
    Kanji,
    LAlt,
    LBracket,
    LControl,
    LShift,
    LWin,
    Mail,
    MediaSelect,
    MediaStop,
    Minus,
    Mute,
    MyComputer,
    NavigateForward,
    NavigateBackward,
    NextTrack,
    NoConvert,
    OEM102,
    Period,
    PlayPause,
    Plus,
    Power,
    PrevTrack,
    RAlt,
    RBracket,
    RControl,
    RShift,
    RWin,
    Semicolon,
    Slash,
    Sleep,
    Stop,
    Sysrq,
    Tab,
    Underline,
    Unlabeled,
    VolumeDown,
    VolumeUp,
    Wake,
    WebBack,
    WebFavorites,
    WebForward,
    WebHome,
    WebRefresh,
    WebSearch,
    WebStop,
    Yen,
    Copy,
    Paste,
    Cut,
}

impl KeyCode {
    pub const fn as_str(self) -> &'static str {
        match self {
            Self::Key1 => "1",
            Self::Key2 => "2",
            Self::Key3 => "3",
            Self::Key4 => "4",
            Self::Key5 => "5",
            Self::Key6 => "6",
            Self::Key7 => "7",
            Self::Key8 => "8",
            Self::Key9 => "9",
            Self::Key0 => "0",
            Self::A => "A",
            Self::B => "B",
            Self::C => "C",
            Self::D => "D",
            Self::E => "E",
            Self::F => "F",
            Self::G => "G",
            Self::H => "H",
            Self::I => "I",
            Self::J => "J",
            Self::K => "K",
            Self::L => "L",
            Self::M => "M",
            Self::N => "N",
            Self::O => "O",
            Self::P => "P",
            Self::Q => "Q",
            Self::R => "R",
            Self::S => "S",
            Self::T => "T",
            Self::U => "U",
            Self::V => "V",
            Self::X => "X",
            Self::Y => "Y",
            Self::Z => "Z",
            _ => todo!(),
        }
    }

    fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "1" => Some(Self::Key1),
            "2" => Some(Self::Key2),
            "3" => Some(Self::Key3),
            "4" => Some(Self::Key4),
            "5" => Some(Self::Key5),
            "6" => Some(Self::Key6),
            "7" => Some(Self::Key7),
            "8" => Some(Self::Key8),
            "9" => Some(Self::Key9),
            "0" => Some(Self::Key0),
            "A" | "a" => Some(Self::A),
            "B" | "b" => Some(Self::B),
            "C" | "c" => Some(Self::C),
            "D" | "d" => Some(Self::D),
            "E" | "e" => Some(Self::E),
            "F" | "f" => Some(Self::F),
            "G" | "g" => Some(Self::G),
            "H" | "h" => Some(Self::H),
            "I" | "i" => Some(Self::I),
            "J" | "j" => Some(Self::J),
            "K" | "k" => Some(Self::K),
            "L" | "l" => Some(Self::L),
            "M" | "m" => Some(Self::M),
            "N" | "n" => Some(Self::N),
            "O" | "o" => Some(Self::O),
            "P" | "p" => Some(Self::P),
            "Q" | "q" => Some(Self::Q),
            "R" | "r" => Some(Self::R),
            "S" | "s" => Some(Self::S),
            "T" | "t" => Some(Self::T),
            "U" | "u" => Some(Self::U),
            "V" | "v" => Some(Self::V),
            "W" | "w" => Some(Self::W),
            "X" | "x" => Some(Self::X),
            "Y" | "y" => Some(Self::Y),
            "Z" | "z" => Some(Self::Z),
            _ => None,
        }
    }
}

#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, Hash)]
pub struct InvalidKeyCode;

impl FromStr for KeyCode {
    type Err = InvalidKeyCode;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        Self::try_from_str(s).ok_or(InvalidKeyCode)
    }
}
